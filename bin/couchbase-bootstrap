#!/bin/bash

#
# This script is run once on the first Couchbase instance to bootstrap the cluster
#

# Couchbase-related environment variables
export PRIVATE_IP=$(ip addr show eth0 | grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}')
HAVEPUBLIC=$(ip link show | grep eth1)
if [[ $HAVEPUBLIC && ${HAVEPUBLIC-x} ]]
    then
    export PUBLIC_IP=$(ip addr show eth1 | grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}')
else
    export PUBLIC_IP=$PRIVATE_IP
fi

export AMOUNT_MEMORY=$(free -m | grep -o "Mem:\s*[0-9]*" | grep -o "[0-9]*")
export NUM_CPUS=$(nproc)
export NUM_CPUS=$(($NUM_CPUS>12?$(($AMOUNT_MEMORY/3072)):$NUM_CPUS))
export NUM_CPUS=$(($NUM_CPUS>1?$NUM_CPUS:1))
export COUCHBASE_NS_SERVER_VM_EXTRA_ARGS=$(printf '["+S", "%s"]' $NUM_CPUS)
export ERL_AFLAGS="+S $NUM_CPUS"
export GOMAXPROCS=$NUM_CPUS
export BUCKET=$2

if [[ $CB_BUCKET_MEM && ${CB_BUCKET_MEM-x} ]]
    then
    export AMOUNT_MEMORY=$CB_BUCKET_MEM
else
    export AMOUNT_MEMORY=$((($AMOUNT_MEMORY/10)*5))
fi

if [[ $CB_INDEX_MEM && ${CB_INDEX_MEM-x} ]]
    then
    export INDEXMEMORY=$CB_INDEX_MEM
else
    export INDEXMEMORY=$((($AMOUNT_MEMORY/10)*2))
fi

if [[ $CB_INDEXER_THREADS && ${CB_INDEXER_THREADS-x} ]]
    then
    export CB_INDEXER_THREADS=$CB_INDEXER_THREADS
else
    export CB_INDEXER_THREADS=2
fi

if [ $INDEXMEMORY -lt 256 ]
    then
    export INDEXMEMORY=256
fi
if [ $AMOUNT_MEMORY -lt 256 ]
    then
    export AMOUNT_MEMORY=256
fi

installed ()
{
    echo
    echo '#'
    echo '# Couchbase is installed and configured'
    echo '#'
    echo "# Dashboard: http://$PUBLIC_IP:8091"
    echo "# Internal IP: $PRIVATE_IP"
    echo "# username=$CB_USERNAME"
    echo "# password=$CB_PASSWORD"
    echo '#'
}

echo
echo '#'
echo '# Testing to see if Couchbase is running yet'
echo '#'

COUCHBASERESPONSIVE=0
while [ $COUCHBASERESPONSIVE != 1 ]; do
    echo -n '.'

    # test the default u/p
    couchbase-cli server-info -c 127.0.0.1:8091 -u access -p password &> /dev/null
    if [ $? -eq 0 ]; then
        let COUCHBASERESPONSIVE=1
    fi

    # test the alternate u/p
    couchbase-cli server-info -c 127.0.0.1:8091 -u $CB_USERNAME -p $CB_PASSWORD &> /dev/null
    if [ $? -eq 0 ]
    then
        let COUCHBASERESPONSIVE=1
    else
        sleep .7
    fi
done
sleep 1

# it's responsive, is it already configured?
couchbase-cli server-list -c 127.0.0.1:8091 -u $CB_USERNAME -p $CB_PASSWORD &> /dev/null
if [ $? -eq 0 ]; then
    echo
    echo '#'
    echo '# Already joined to cluster...'
    echo '#'
    installed

    exit
fi

COUCHBASERESPONSIVE=0
while [ $COUCHBASERESPONSIVE != 1 ]; do
    echo -n '.'

    # test the default u/p
    couchbase-cli server-info -c 127.0.0.1:8091 -u access -p password &> /dev/null
    if [ $? -eq 0 ]; then
        let COUCHBASERESPONSIVE=1
    fi

    # test the alternate u/p
    couchbase-cli server-info -c 127.0.0.1:8091 -u $CB_USERNAME -p $CB_PASSWORD &> /dev/null
    if [ $? -eq 0 ]
    then
        let COUCHBASERESPONSIVE=1
    else
        sleep .7
    fi
done
sleep 10

echo
echo '#'
echo '# Initializing node'
echo '#'

COUCHBASERESPONSIVE=0
while [ $COUCHBASERESPONSIVE != 1 ]; do
    echo -n '.'

    curl -s -u Administrator:password -X POST http://127.0.0.1:8091/nodes/self/controller/settings \
            -d path=/opt/couchbase/var/lib/couchbase/data \
            -d index_path=/opt/couchbase/var/lib/couchbase/data

    curl -s -u Administrator:password -X POST http://127.0.0.1:8091/node/controller/rename \
            -d hostname=$PRIVATE_IP

    if [ $? -eq 0 ]
    then
        let COUCHBASERESPONSIVE=1
    else
        sleep .7
    fi
done
echo

export CB_SERVICES=""
if [ "$COUCHBASE_SERVICE_INDEX" == "True" ];
    then
    CB_SERVICES+=",index"
fi
if [ "$COUCHBASE_SERVICE_QUERY" == "True" ];
    then
    CB_SERVICES+=",n1ql"
fi
if [ "$COUCHBASE_SERVICE_DATA" == "True" ];
    then
    CB_SERVICES+=",kv"
fi

export CB_SERVICES=$(echo "$CB_SERVICES" | sed "s/,,/,/" | sed "s/,$//" | sed "s/^,//")

if [ "$1" = 'bootstrap' ]
then
    echo '#'
    echo '# Bootstrapping cluster'
    echo '#'

    # initializing the cluster
    COUCHBASERESPONSIVE=0
    while [ $COUCHBASERESPONSIVE != 1 ]; do
        echo -n '.'

        curl -s -u Administrator:password -X POST http://127.0.0.1:8091/pools/default \
                -d memoryQuota=$AMOUNT_MEMORY &> /dev/null

        curl -s -u $CB_USERNAME:$CB_PASSWORD -X POST http://127.0.0.1:8091/pools/default \
                -d indexMemoryQuota=$INDEXMEMORY &> /dev/null

        curl -s -u $CB_USERNAME:$CB_PASSWORD -X POST http://127.0.0.1:8091/settings/indexes \
                -d indexerThreads=$CB_INDEXER_THREADS &> /dev/null

        curl -s -u $CB_USERNAME:$CB_PASSWORD -X POST http://127.0.0.1:8091/node/controller/setupServices \
                -d services=$CB_SERVICES &> /dev/null

        curl -s -u $CB_USERNAME:$CB_PASSWORD -X POST http://127.0.0.1:8091/settings/web \
                -d password=$CB_PASSWORD \
                -d username=$CB_USERNAME \
                -d port=8091 &> /dev/null

        if [ $? -eq 0 ]
        then
            let COUCHBASERESPONSIVE=1
        else
            sleep .7
        fi
    done

    # creating the bucket
    COUCHBASERESPONSIVE=0
    while [ $COUCHBASERESPONSIVE != 1 ]; do
        echo -n '.'

        if [[ $BUCKET && ${BUCKET-x} ]]
            then

            echo '#'
            echo '# Creating bucket'
            echo '#'

            # creating the bucket
            curl -s -u $CB_USERNAME:$CB_PASSWORD -X POST http://127.0.0.1:8091/pools/default/buckets \
                  -d flushEnabled=0 \
                  -d replicaNumber=0 \
                  -d evictionPolicy=valueOnly \
                  -d ramQuotaMB=$AMOUNT_MEMORY \
                  -d bucketType=couchbase \
                  -d name=$BUCKET \
                  -d authType=sasl

            /usr/local/bin/triton-tune-bucket $BUCKET
        fi

        if [ $? -eq 0 ]
        then
            let COUCHBASERESPONSIVE=1
        else
            sleep .7
        fi
    done

else
    echo '#'
    echo '# Looking for an existing cluster'
    echo '#'

    CLUSTERFOUND=0
    while [ $CLUSTERFOUND != 1 ]; do
        echo -n '.'

        CLUSTERIP=$(curl -L -s -f http://$CONSUL_IP:$CONSUL_PORT/v1/catalog/service/couchbase | json -aH ServiceAddress | tail -1)
        if [ -n "$CLUSTERIP" ]
        then
            let CLUSTERFOUND=1
        else
            sleep 7
        fi
    done


    echo
    echo '#'
    echo '# Joining cluster...'
    echo '#'

    COUCHBASERESPONSIVE=0
    while [ $COUCHBASERESPONSIVE != 1 ]; do
        echo -n '.'

        /opt/couchbase/bin/couchbase-cli server-add -c $CLUSTERIP:8091 \
           --server-add=$(ip addr show eth0 | grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}'):8091 \
           --server-add-username=access \
           --server-add-password=password \
           --services=$CB_SERVICES \
           -u $CB_USERNAME -p $CB_PASSWORD

        if [ $? -eq 0 ]
        then
            let COUCHBASERESPONSIVE=1
        else
            sleep .7
        fi
    done

    echo
    echo '#'
    echo '# Rebalancing cluster'
    echo '#'

    # doing this in a loop in case multiple containers are started at once
    # it seems the rebalance command cannot be called while a rebalance is in progress
    COUCHBASERESPONSIVE=0
    while [ $COUCHBASERESPONSIVE != 1 ]; do
        echo -n '.'

        couchbase-cli rebalance -c 127.0.0.1:8091 -u $CB_USERNAME -p $CB_PASSWORD
        if [ $? -eq 0 ]
        then
            let COUCHBASERESPONSIVE=1
        else
            sleep .7
        fi
    done
fi

echo
echo '#'
echo '# Confirming cluster health...'
echo '#'

COUCHBASERESPONSIVE=0
while [ $COUCHBASERESPONSIVE != 1 ]; do
    echo -n '.'

    couchbase-cli server-list -c 127.0.0.1:8091 -u $CB_USERNAME -p $CB_PASSWORD
    if [ $? -eq 0 ]
    then
        let COUCHBASERESPONSIVE=1
    else
        sleep .7
    fi

    # if this never exits, then it will never register as a healthy node in the cluster
    # watch the logs for that...
done

echo
echo '#'
echo '# Registering service instance'
echo '#'

curl -f --retry 7 --retry-delay 3 http://$CONSUL_IP:$CONSUL_PORT/v1/agent/service/register -d "$(printf '{"ID":"couchbase-%s","Name":"couchbase","Address":"%s","Port":8091, "Check":{"HTTP": "http://%s:8091/index.html", "Interval": "10s"}}' $PRIVATE_IP $PRIVATE_IP $PRIVATE_IP)"

installed
